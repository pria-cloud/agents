#!/bin/bash
# GitHub Synchronization Script for PRIA Projects
# Handles push/pull operations with proper authentication

set -e

OPERATION=${1:-"status"}  # status, pull, push, sync
PROJECT_DIR=${2:-"."}
COMMIT_MESSAGE=${3:-"Auto-sync from PRIA"}
GITHUB_TOKEN=${4:-""}

cd "$PROJECT_DIR"

# Function to authenticate with GitHub
authenticate_github() {
  if [ ! -z "$GITHUB_TOKEN" ]; then
    echo "$GITHUB_TOKEN" | gh auth login --with-token
    echo "‚úÖ GitHub authentication successful"
  else
    echo "‚ö†Ô∏è  No GitHub token provided - using existing authentication"
  fi
}

# Function to check repository status
check_status() {
  echo "üìä Repository Status:"
  echo "Branch: $(git branch --show-current)"
  echo "Remote: $(git remote get-url origin 2>/dev/null || echo 'No remote configured')"
  echo "Status:"
  git status --porcelain
  echo ""
  echo "Recent commits:"
  git log --oneline -5
}

# Function to pull latest changes from remote
pull_changes() {
  echo "üì• Pulling latest changes from remote..."
  
  # Check if we have a remote
  if ! git remote get-url origin >/dev/null 2>&1; then
    echo "‚ùå No remote repository configured"
    return 1
  fi
  
  # Fetch latest changes
  git fetch origin
  
  # Check if we have local changes
  if ! git diff-index --quiet HEAD --; then
    echo "‚ö†Ô∏è  Local changes detected, stashing..."
    git stash push -m "Auto-stash before pull $(date)"
  fi
  
  # Pull changes
  CURRENT_BRANCH=$(git branch --show-current)
  git pull origin "$CURRENT_BRANCH"
  
  # Apply stashed changes if any
  if git stash list | grep -q "Auto-stash before pull"; then
    echo "üì¶ Restoring stashed changes..."
    git stash pop
  fi
  
  echo "‚úÖ Pull completed successfully"
}

# Function to push changes to remote
push_changes() {
  echo "üì§ Pushing changes to remote..."
  
  # Check if we have a remote
  if ! git remote get-url origin >/dev/null 2>&1; then
    echo "‚ùå No remote repository configured"
    return 1
  fi
  
  # Stage all changes
  git add .
  
  # Check if there are changes to commit
  if git diff-index --quiet HEAD --; then
    echo "‚ÑπÔ∏è  No changes to commit"
    return 0
  fi
  
  # Commit changes
  git commit -m "$COMMIT_MESSAGE

ü§ñ Generated by PRIA App Builder
Time: $(date)
Files changed: $(git diff --name-only HEAD~1 | wc -l)"
  
  # Push to remote
  CURRENT_BRANCH=$(git branch --show-current)
  git push origin "$CURRENT_BRANCH"
  
  echo "‚úÖ Push completed successfully"
}

# Function to sync (pull then push)
sync_repository() {
  echo "üîÑ Synchronizing repository..."
  pull_changes
  push_changes
  echo "‚úÖ Sync completed successfully"
}

# Function to create a new repository on GitHub
create_repository() {
  local repo_name=$1
  local description=${2:-"PRIA generated application"}
  local private=${3:-true}
  
  echo "üÜï Creating new GitHub repository: $repo_name"
  
  authenticate_github
  
  # Create repository
  if [ "$private" = "true" ]; then
    gh repo create "$repo_name" --description "$description" --private
  else
    gh repo create "$repo_name" --description "$description" --public
  fi
  
  # Add remote
  git remote add origin "https://github.com/$(gh api user --jq .login)/$repo_name.git"
  
  echo "‚úÖ Repository created and remote configured"
}

# Function to setup GitHub authentication in the sandbox
setup_github_auth() {
  local github_token=$1
  local git_username=${2:-"PRIA Assistant"}
  local git_email=${3:-"assistant@pria.dev"}
  
  echo "üîê Setting up GitHub authentication..."
  
  # Configure Git
  git config --global user.name "$git_username"
  git config --global user.email "$git_email"
  
  # Authenticate with GitHub CLI
  if [ ! -z "$github_token" ]; then
    echo "$github_token" | gh auth login --with-token
    echo "‚úÖ GitHub CLI authenticated"
  fi
  
  echo "‚úÖ GitHub authentication setup complete"
}

# Main execution
case $OPERATION in
  "status")
    check_status
    ;;
  "pull")
    authenticate_github
    pull_changes
    ;;
  "push")
    authenticate_github
    push_changes
    ;;
  "sync")
    authenticate_github
    sync_repository
    ;;
  "create")
    REPO_NAME=${5:-"pria-app"}
    DESCRIPTION=${6:-"PRIA generated application"}
    PRIVATE=${7:-"true"}
    create_repository "$REPO_NAME" "$DESCRIPTION" "$PRIVATE"
    ;;
  "setup-auth")
    setup_github_auth "$GITHUB_TOKEN" "${5}" "${6}"
    ;;
  *)
    echo "üìñ Usage: github-sync.sh <operation> [project_dir] [commit_message] [github_token]"
    echo ""
    echo "Operations:"
    echo "  status     - Show repository status"
    echo "  pull       - Pull latest changes from remote"
    echo "  push       - Push local changes to remote"
    echo "  sync       - Pull then push (full sync)"
    echo "  create     - Create new GitHub repository"
    echo "  setup-auth - Setup GitHub authentication"
    echo ""
    echo "Examples:"
    echo "  github-sync.sh status"
    echo "  github-sync.sh pull /workspace/my-app"
    echo "  github-sync.sh push /workspace/my-app 'Add new features'"
    echo "  github-sync.sh sync /workspace/my-app 'Auto-sync' \$GITHUB_TOKEN"
    exit 1
    ;;
esac