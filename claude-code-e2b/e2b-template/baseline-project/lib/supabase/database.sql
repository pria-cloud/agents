-- Claude Code E2B Database Schema
-- Production schema for persisting Claude Code workspace data

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Workspaces table (PRIA tenant isolation)
CREATE TABLE workspaces (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    owner_id UUID NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE workspaces ENABLE ROW LEVEL SECURITY;

-- Sessions table (Claude Code development sessions)
CREATE TABLE sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'paused', 'archived')),
    github_repo_url TEXT,
    github_branch VARCHAR(100) DEFAULT 'main',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;

-- Requirements table (User stories and specifications)
CREATE TABLE requirements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    priority VARCHAR(20) DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'in-progress', 'completed')),
    category VARCHAR(100),
    acceptance_criteria JSONB DEFAULT '[]',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE requirements ENABLE ROW LEVEL SECURITY;

-- Technical specifications (Generated by Claude Code SDK)
CREATE TABLE technical_specs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    requirement_id UUID REFERENCES requirements(id) ON DELETE SET NULL,
    category VARCHAR(100) NOT NULL, -- 'frontend', 'backend', 'database', etc.
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    implementation_details TEXT,
    code_examples JSONB DEFAULT '[]',
    dependencies JSONB DEFAULT '[]',
    generated_by_claude BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE technical_specs ENABLE ROW LEVEL SECURITY;

-- Workflow steps (Visual workflow designer data)
CREATE TABLE workflow_steps (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    step_type VARCHAR(50) NOT NULL CHECK (step_type IN ('start', 'action', 'decision', 'end')),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    position_x INTEGER DEFAULT 0,
    position_y INTEGER DEFAULT 0,
    configuration JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE workflow_steps ENABLE ROW LEVEL SECURITY;

-- Workflow connections (Links between workflow steps)
CREATE TABLE workflow_connections (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    from_step_id UUID NOT NULL REFERENCES workflow_steps(id) ON DELETE CASCADE,
    to_step_id UUID NOT NULL REFERENCES workflow_steps(id) ON DELETE CASCADE,
    label VARCHAR(100),
    condition_expression TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE workflow_connections ENABLE ROW LEVEL SECURITY;

-- Generated files (Track files created by Claude Code SDK)
CREATE TABLE generated_files (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    file_path TEXT NOT NULL,
    file_type VARCHAR(50), -- 'component', 'api', 'schema', 'config', etc.
    content TEXT,
    github_commit_sha VARCHAR(40),
    generated_from_requirement_id UUID REFERENCES requirements(id) ON DELETE SET NULL,
    created_by_claude BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(session_id, file_path)
);

ALTER TABLE generated_files ENABLE ROW LEVEL SECURITY;

-- Claude Code SDK operations log (Track agent actions)
CREATE TABLE claude_operations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    operation_type VARCHAR(100) NOT NULL, -- 'generate_code', 'analyze_requirements', 'create_test', etc.
    input_data JSONB NOT NULL,
    output_data JSONB,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'in-progress', 'completed', 'failed')),
    error_message TEXT,
    execution_time_ms INTEGER,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    completed_at TIMESTAMPTZ
);

ALTER TABLE claude_operations ENABLE ROW LEVEL SECURITY;

-- Database schema definitions (Visual database designer)
CREATE TABLE database_schemas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    table_name VARCHAR(100) NOT NULL,
    table_description TEXT,
    columns_definition JSONB NOT NULL DEFAULT '[]',
    relationships JSONB DEFAULT '[]',
    indexes JSONB DEFAULT '[]',
    generated_sql TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(session_id, table_name)
);

ALTER TABLE database_schemas ENABLE ROW LEVEL SECURITY;

-- API endpoint definitions (API documentation data)
CREATE TABLE api_endpoints (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    method VARCHAR(10) NOT NULL CHECK (method IN ('GET', 'POST', 'PUT', 'DELETE', 'PATCH')),
    path TEXT NOT NULL,
    summary VARCHAR(255),
    description TEXT,
    parameters JSONB DEFAULT '[]',
    responses JSONB DEFAULT '[]',
    authentication_required BOOLEAN DEFAULT false,
    implementation_status VARCHAR(20) DEFAULT 'planned' CHECK (implementation_status IN ('planned', 'generated', 'implemented', 'tested')),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    
    UNIQUE(session_id, method, path)
);

ALTER TABLE api_endpoints ENABLE ROW LEVEL SECURITY;

-- Session history events (Timeline tracking)
CREATE TABLE session_history (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    event_type VARCHAR(50) NOT NULL, -- 'requirement', 'code', 'database', 'deployment', 'test'
    event_title VARCHAR(255) NOT NULL,
    event_description TEXT,
    event_data JSONB DEFAULT '{}',
    changes_summary JSONB DEFAULT '{"added": 0, "modified": 0, "deleted": 0}',
    performed_by VARCHAR(100) DEFAULT 'Claude',
    status VARCHAR(20) DEFAULT 'success' CHECK (status IN ('success', 'failed', 'pending')),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE session_history ENABLE ROW LEVEL SECURITY;

-- Test cases and results (Preview & Testing data)
CREATE TABLE test_cases (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    test_name VARCHAR(255) NOT NULL,
    test_type VARCHAR(50) NOT NULL, -- 'unit', 'integration', 'e2e'
    file_path TEXT,
    test_code TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'passed', 'failed', 'running')),
    last_run_at TIMESTAMPTZ,
    execution_time_ms INTEGER,
    error_message TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE test_cases ENABLE ROW LEVEL SECURITY;

-- RLS Policies (Workspace-level tenant isolation)

-- Workspaces policies
CREATE POLICY "Users can view their own workspaces" ON workspaces
    FOR SELECT USING (owner_id = auth.uid());

CREATE POLICY "Users can insert their own workspaces" ON workspaces
    FOR INSERT WITH CHECK (owner_id = auth.uid());

CREATE POLICY "Users can update their own workspaces" ON workspaces
    FOR UPDATE USING (owner_id = auth.uid());

-- Sessions policies  
CREATE POLICY "Workspace isolation for sessions" ON sessions
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Requirements policies
CREATE POLICY "Workspace isolation for requirements" ON requirements
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Technical specs policies
CREATE POLICY "Workspace isolation for technical_specs" ON technical_specs
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Workflow steps policies
CREATE POLICY "Workspace isolation for workflow_steps" ON workflow_steps
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Workflow connections policies
CREATE POLICY "Workspace isolation for workflow_connections" ON workflow_connections
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Generated files policies
CREATE POLICY "Workspace isolation for generated_files" ON generated_files
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Claude operations policies
CREATE POLICY "Workspace isolation for claude_operations" ON claude_operations
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Database schemas policies
CREATE POLICY "Workspace isolation for database_schemas" ON database_schemas
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- API endpoints policies
CREATE POLICY "Workspace isolation for api_endpoints" ON api_endpoints
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Session history policies
CREATE POLICY "Workspace isolation for session_history" ON session_history
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Test cases policies
CREATE POLICY "Workspace isolation for test_cases" ON test_cases
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Indexes for performance
CREATE INDEX idx_sessions_workspace_id ON sessions(workspace_id);
CREATE INDEX idx_requirements_session_id ON requirements(session_id);
CREATE INDEX idx_requirements_workspace_id ON requirements(workspace_id);
CREATE INDEX idx_technical_specs_session_id ON technical_specs(session_id);
CREATE INDEX idx_generated_files_session_id ON generated_files(session_id);
CREATE INDEX idx_claude_operations_session_id ON claude_operations(session_id);
CREATE INDEX idx_session_history_session_id ON session_history(session_id);
CREATE INDEX idx_session_history_created_at ON session_history(created_at DESC);

-- Functions for updating timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for auto-updating timestamps
CREATE TRIGGER update_workspaces_updated_at BEFORE UPDATE ON workspaces FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_sessions_updated_at BEFORE UPDATE ON sessions FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_requirements_updated_at BEFORE UPDATE ON requirements FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_technical_specs_updated_at BEFORE UPDATE ON technical_specs FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_workflow_steps_updated_at BEFORE UPDATE ON workflow_steps FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_generated_files_updated_at BEFORE UPDATE ON generated_files FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_database_schemas_updated_at BEFORE UPDATE ON database_schemas FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_api_endpoints_updated_at BEFORE UPDATE ON api_endpoints FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_test_cases_updated_at BEFORE UPDATE ON test_cases FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Execution results table (Store code execution outcomes)
CREATE TABLE execution_results (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    entry_point TEXT NOT NULL,
    result TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'success', 'error', 'timeout')),
    execution_time INTEGER, -- milliseconds
    errors JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE execution_results ENABLE ROW LEVEL SECURITY;

-- Execution results policies
CREATE POLICY "Workspace isolation for execution_results" ON execution_results
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

-- Additional indexes
CREATE INDEX idx_execution_results_session_id ON execution_results(session_id);
CREATE INDEX idx_execution_results_workspace_id ON execution_results(workspace_id);
CREATE INDEX idx_execution_results_created_at ON execution_results(created_at DESC);

-- Trigger for execution results
CREATE TRIGGER update_execution_results_updated_at BEFORE UPDATE ON execution_results FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Additional security: Add missing github_token and github_repo_url columns to sessions if not exists
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS github_token TEXT;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS vercel_project_id TEXT;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS vercel_org_id TEXT;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS vercel_domain TEXT;
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS deployment_status VARCHAR(50) DEFAULT 'pending';
ALTER TABLE sessions ADD COLUMN IF NOT EXISTS production_url TEXT;

-- Add workspace metadata for better tenant management
ALTER TABLE workspaces ADD COLUMN IF NOT EXISTS plan VARCHAR(50) DEFAULT 'free';
ALTER TABLE workspaces ADD COLUMN IF NOT EXISTS max_sessions INTEGER DEFAULT 10;
ALTER TABLE workspaces ADD COLUMN IF NOT EXISTS max_storage_mb INTEGER DEFAULT 1000;
ALTER TABLE workspaces ADD COLUMN IF NOT EXISTS settings JSONB DEFAULT '{}';

-- Create usage tracking table for billing and limits
CREATE TABLE IF NOT EXISTS workspace_usage (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    metric_name VARCHAR(100) NOT NULL, -- 'api_calls', 'storage_mb', 'execution_time', etc.
    metric_value BIGINT NOT NULL,
    period_start TIMESTAMPTZ NOT NULL,
    period_end TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE workspace_usage ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Workspace isolation for workspace_usage" ON workspace_usage
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

CREATE INDEX idx_workspace_usage_workspace_id ON workspace_usage(workspace_id);
CREATE INDEX idx_workspace_usage_metric ON workspace_usage(workspace_id, metric_name, period_start);

-- Security enhancements: Add API rate limiting table
CREATE TABLE IF NOT EXISTS api_rate_limits (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workspace_id UUID NOT NULL REFERENCES workspaces(id) ON DELETE CASCADE,
    endpoint_pattern VARCHAR(255) NOT NULL,
    requests_count INTEGER NOT NULL DEFAULT 0,
    window_start TIMESTAMPTZ NOT NULL,
    window_end TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE api_rate_limits ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Workspace isolation for api_rate_limits" ON api_rate_limits
    FOR ALL USING (workspace_id IN (
        SELECT id FROM workspaces WHERE owner_id = auth.uid()
    ));

CREATE INDEX idx_api_rate_limits_workspace_endpoint ON api_rate_limits(workspace_id, endpoint_pattern);
CREATE INDEX idx_api_rate_limits_window ON api_rate_limits(window_start, window_end);

CREATE TRIGGER update_api_rate_limits_updated_at BEFORE UPDATE ON api_rate_limits FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Add encryption at rest for sensitive data (in production, use database-level encryption)
-- For development, we add basic obfuscation
CREATE OR REPLACE FUNCTION encrypt_sensitive_data(data TEXT)
RETURNS TEXT AS $$
BEGIN
    -- In production, use proper encryption like pgcrypto
    -- For now, return as-is but mark for encryption
    RETURN data;
END;
$$ LANGUAGE plpgsql;

-- Add audit logging function
CREATE OR REPLACE FUNCTION log_data_changes()
RETURNS TRIGGER AS $$
BEGIN
    -- Log all changes to sensitive tables
    IF TG_OP = 'INSERT' THEN
        INSERT INTO session_history (session_id, workspace_id, event_type, event_title, event_description, event_data)
        VALUES (
            COALESCE(NEW.session_id, gen_random_uuid()),
            NEW.workspace_id,
            'data_change',
            TG_OP || ' on ' || TG_TABLE_NAME,
            'Record created in ' || TG_TABLE_NAME,
            json_build_object('operation', TG_OP, 'table', TG_TABLE_NAME, 'record_id', NEW.id)
        );
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO session_history (session_id, workspace_id, event_type, event_title, event_description, event_data)
        VALUES (
            COALESCE(NEW.session_id, OLD.session_id, gen_random_uuid()),
            NEW.workspace_id,
            'data_change',
            TG_OP || ' on ' || TG_TABLE_NAME,
            'Record updated in ' || TG_TABLE_NAME,
            json_build_object('operation', TG_OP, 'table', TG_TABLE_NAME, 'record_id', NEW.id)
        );
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO session_history (session_id, workspace_id, event_type, event_title, event_description, event_data)
        VALUES (
            COALESCE(OLD.session_id, gen_random_uuid()),
            OLD.workspace_id,
            'data_change',
            TG_OP || ' on ' || TG_TABLE_NAME,
            'Record deleted from ' || TG_TABLE_NAME,
            json_build_object('operation', TG_OP, 'table', TG_TABLE_NAME, 'record_id', OLD.id)
        );
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Add audit triggers to critical tables
CREATE TRIGGER audit_workspaces AFTER INSERT OR UPDATE OR DELETE ON workspaces
    FOR EACH ROW EXECUTE FUNCTION log_data_changes();

CREATE TRIGGER audit_sessions AFTER INSERT OR UPDATE OR DELETE ON sessions
    FOR EACH ROW EXECUTE FUNCTION log_data_changes();

CREATE TRIGGER audit_generated_files AFTER INSERT OR UPDATE OR DELETE ON generated_files
    FOR EACH ROW EXECUTE FUNCTION log_data_changes();

-- Create backup and recovery procedures
CREATE OR REPLACE FUNCTION backup_workspace_data(workspace_uuid UUID)
RETURNS JSONB AS $$
DECLARE
    backup_data JSONB;
BEGIN
    -- Create comprehensive backup of workspace data
    SELECT json_build_object(
        'workspace', (SELECT row_to_json(w) FROM workspaces w WHERE w.id = workspace_uuid),
        'sessions', (SELECT json_agg(s) FROM sessions s WHERE s.workspace_id = workspace_uuid),
        'requirements', (SELECT json_agg(r) FROM requirements r WHERE r.workspace_id = workspace_uuid),
        'technical_specs', (SELECT json_agg(ts) FROM technical_specs ts WHERE ts.workspace_id = workspace_uuid),
        'generated_files', (SELECT json_agg(gf) FROM generated_files gf WHERE gf.workspace_id = workspace_uuid),
        'workflow_steps', (SELECT json_agg(ws) FROM workflow_steps ws WHERE ws.workspace_id = workspace_uuid),
        'workflow_connections', (SELECT json_agg(wc) FROM workflow_connections wc WHERE wc.workspace_id = workspace_uuid),
        'claude_operations', (SELECT json_agg(co) FROM claude_operations co WHERE co.workspace_id = workspace_uuid),
        'backup_timestamp', NOW()
    ) INTO backup_data;
    
    RETURN backup_data;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;